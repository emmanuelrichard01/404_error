* {

    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

@import url('https://fonts.googleapis.com/css2?family=Montserrat&family=Orbitron:wght@700&display=swap');

html,
body {
    height: 97%;
    color: white;
    padding: 0;
    margin: 0;
    font-family: 'Montserrat',
        sans-serif;
    background-color: linear-gradient(315deg, #7f5a83 0%, #0d324d 74%);
    background-image: url('./unsplash.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;

    .container {
        height: 100%;
        display: flex;
        color: #fff;
        justify-content: space-evenly;
        align-items: center;

        .container>div {
            flex: 1;
        }

        .glass {
            margin: 0;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            height: 80vh;
            width: 80vw;
            z-index: 1;
            background: rgba(34, 32, 32, 0.35);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            backdrop-filter: blur(7.5px);
            border-radius: 10px;
        }

        .error_svg {
            z-index: 2;
            padding-left: 3.6em;
            transform: translatey(0px);
            animation: float 6s ease-in-out infinite;
        }

        .error_msg {
            z-index: 2;
            display: flex;
            flex-direction: column;
            max-width: 500px;

            h1 {
                font-size: 3.5vw;
                padding-bottom: .5em;
            }

            .msg2 {
                width: 19vw;
                line-height: 180%;
                margin-bottom: 1em;
            }

            button {
                color: #35373e;
                font-size: 1.1em;
                padding: 1em 2em;
                width: 50%;
                font-weight: bold;
                background: rgba(254, 248, 248, 0.50);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
                backdrop-filter: blur(2.5px);
                border-radius: 10px;
                border: 1px solid rgba(255, 255, 255, 0.18);
                transition: all .3s ease-out;

                &:hover {
                    color: #c9d1ea;
                    background: rgba(216, 216, 216, 0.20);
                    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
                    backdrop-filter: blur(3.0px);
                    border-radius: 10px;
                    border: 1px solid rgba(255, 255, 255, 0.18);
                }
            }
        }
    }

    #footer {
        display: flex;
        font-size: 0.8rem;
        margin: 0;
        padding: 0;
        justify-content: center;
    }
}


@keyframes float {
    0% {
        transform: translatey(0px);
    }

    50% {
        transform: translatey(-20px);
    }

    100% {
        transform: translatey(0px);
    }
}

// Here's the meat and potatoes.

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch {
    position: relative;
    color: white;
    font-family: 'Orbitron',
        sans-serif;
    font-size: 10em;
    letter-spacing: .1em;
    /* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
    // animation: glitch-skew 2.5s infinite linear alternate-reverse;

    // Creates a copy before our text.
    &::before {
        // Duplicates our text with the mixin.
        @include glitchCopy;
        // Scoots text slightly to the left for the color offset.
        left: 2px;
        // Creates the color 'shadow' that happens on the glitch.
        text-shadow: -2px 0 #ff00c1;
        /* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
        clip: rect(44px, 450px, 56px, 10px);
        /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
        animation: glitch-anim 5s infinite linear alternate-reverse;
    }

    // Creates a copy after our text. Note comments from ::before.
    &::after {
        @include glitchCopy;
        left: -2px;
        text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
        animation: glitch-anim2 1.5s infinite linear alternate-reverse;
    }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
    $steps: 20;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
    $steps: 30;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
    $steps: 10;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            transform: skew((random(4) - 1) + deg);
        }
    }
}